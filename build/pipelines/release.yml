parameters:
  - name: branding
    displayName: "Branding (Build Type)"
    type: string
    default: Release
    values:
      - Release
      - Preview
  - name: buildTerminal
    displayName: "Build Windows Terminal MSIX"
    type: boolean
    default: true
  - name: buildTerminalVPack
    displayName: "Build Windows Terminal VPack"
    type: boolean
    default: false
  - name: buildWPF
    displayName: "Build Terminal WPF Control"
    type: boolean
    default: false
  - name: pgoBuildMode
    displayName: "PGO Build Mode"
    type: string
    default: Optimize
    values:
      - Optimize
      - Instrument
      - None

  - name: buildConfigurations
    type: object
    default:
      - Release
  - name: buildPlatforms
    type: object
    default:
      - x64
      - x86
      - arm64

variables:
  TerminalInternalPackageVersion: "0.0.7"

name: $(BuildDefinitionName)_$(date:yyMM).$(date:dd)$(rev:rrr)
resources:
  repositories:
  - repository: self
    type: git
    ref: main
jobs:
- job: Build
  strategy:
    matrix:
      ${{ each config in parameters.buildConfigurations }}:
        ${{ each platform in parameters.buildPlatforms }}:
          ${{ config }}_${{ platform }}:
            BuildConfiguration: ${{ config }}
            BuildPlatform: ${{ platform }}
  displayName: Build
  cancelTimeoutInMinutes: 1
  pool:
    name: Package ES Standard Build
  steps:
  - checkout: self
    clean: true
    submodules: true
    persistCredentials: True
  - task: PkgESSetupBuild@10
    displayName: Package ES - Setup Build
    inputs:
      useDfs: false
      productName: OpenConsole
      disableOutputRedirect: true
  - task: PowerShell@2
    displayName: Rationalize Build Platform
    inputs:
      targetType: inline
      script: >-
        $Arch = "$(BuildPlatform)"

        If ($Arch -Eq "x86") { $Arch = "Win32" }

        Write-Host "##vso[task.setvariable variable=RationalizedBuildPlatform]${Arch}"
  - task: NuGetToolInstaller@1
    displayName: Use NuGet 5.10
    inputs:
      versionSpec: 5.10
  - task: NuGetCommand@2
    displayName: NuGet custom
    inputs:
      command: custom
      selectOrConfig: config
      nugetConfigPath: NuGet.Config
      arguments: restore OpenConsole.sln -SolutionDirectory $(Build.SourcesDirectory)
  - task: UniversalPackages@0
    displayName: Download terminal-internal Universal Package
    inputs:
      feedListDownload: 2b3f8893-a6e8-411f-b197-a9e05576da48
      packageListDownload: e82d490c-af86-4733-9dc4-07b772033204
      versionListDownload: $(TerminalInternalPackageVersion)
  - task: TouchdownBuildTask@1
    displayName: Download Localization Files
    inputs:
      teamId: 7105
      authId: $(TouchdownAppId)
      authKey: $(TouchdownAppKey)
      resourceFilePath: >-
        src\cascadia\TerminalApp\Resources\en-US\Resources.resw

        src\cascadia\TerminalControl\Resources\en-US\Resources.resw

        src\cascadia\TerminalConnection\Resources\en-US\Resources.resw

        src\cascadia\TerminalSettingsModel\Resources\en-US\Resources.resw

        src\cascadia\TerminalSettingsEditor\Resources\en-US\Resources.resw

        src\cascadia\WindowsTerminalUniversal\Resources\en-US\Resources.resw

        src\cascadia\CascadiaPackage\Resources\en-US\Resources.resw
      appendRelativeDir: true
      localizationTarget: false
      pseudoSetting: Included
  - task: PowerShell@2
    displayName: Move Loc files one level up
    inputs:
      targetType: inline
      script: >-
        $Files = Get-ChildItem . -R -Filter 'Resources.resw' | ? FullName -Like '*en-US\*\Resources.resw'

        $Files | % { Move-Item -Verbose $_.Directory $_.Directory.Parent.Parent -EA:Ignore }
      pwsh: true
  - task: PowerShell@2
    displayName: Generate NOTICE.html from NOTICE.md
    inputs:
      filePath: .\build\scripts\Generate-ThirdPartyNotices.ps1
      arguments: -MarkdownNoticePath .\NOTICE.md -OutputPath .\src\cascadia\CascadiaPackage\NOTICE.html
      pwsh: true
  - ${{ if eq(parameters.pgoBuildMode, 'Optimize') }}:
    - task: PowerShell@2
      displayName: Restore PGO Database
      inputs:
        filePath: tools/PGODatabase/restore-pgodb.ps1
        workingDirectory: $(Build.SourcesDirectory)\tools\PGODatabase
  - task: PowerShell@2
    displayName: '[BODGY] Write project.assets.json to the right place'
    inputs:
      targetType: inline
      script: >-
        $by = [System.Convert]::FromBase64String("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")

        [System.IO.File]::WriteAllBytes(".\asset.tgz", $by)

        new-item -type directory src\cascadia\CascadiaPackage\obj -ea:ignore -force

        tar -x -v -f .\asset.tgz -C .\src\cascadia\CascadiaPackage\obj

        new-item -type directory src\tools\MonarchPeasantPackage\obj -ea:ignore -force

        tar -x -v -f .\asset.tgz -C .\src\tools\MonarchPeasantPackage\obj
      pwsh: true
  - ${{ if eq(parameters.buildTerminal, true) }}:
    - task: VSBuild@1
      displayName: Build solution **\OpenConsole.sln
      inputs:
        solution: '**\OpenConsole.sln'
        vsVersion: 16.0
        msbuildArgs: /p:WindowsTerminalOfficialBuild=true /p:WindowsTerminalBranding=${{ parameters.branding }} /t:Terminal\CascadiaPackage;Terminal\WindowsTerminalUniversal /p:WindowsTerminalReleaseBuild=true /bl:$(Build.SourcesDirectory)\msbuild.binlog
        platform: $(BuildPlatform)
        configuration: $(BuildConfiguration)
        clean: true
        maximumCpuCount: true
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: binlog'
      condition: failed()
      continueOnError: True
      inputs:
        PathtoPublish: $(Build.SourcesDirectory)\msbuild.binlog
        ArtifactName: binlog-$(BuildPlatform)
    - ${{ if eq(parameters.pgoBuildMode, 'Optimize') }}:
      - task: PowerShell@2
        displayName: Validate binaries are optimized
        condition: and(succeeded(), eq(variables['BuildPlatform'], 'x64'))
        inputs:
          targetType: inline
          script: "$Binaries = 'OpenConsole.exe', 'WindowsTerminal.exe', 'TerminalApp.dll', 'TerminalConnection.dll', 'Microsoft.Terminal.Control.dll', 'Microsoft.Terminal.Remoting.dll', 'Microsoft.Terminal.Settings.Editor.dll', 'Microsoft.Terminal.Settings.Model.dll' \nforeach ($BinFile in $Binaries)\n{\n    & \"$(Build.SourcesDirectory)\\tools\\PGODatabase\\verify-pgo.ps1\" \"$(Build.SourcesDirectory)/src/cascadia/CascadiaPackage/bin/$(BuildPlatform)/$(BuildConfiguration)/$BinFile\"\n}"
    - task: PowerShell@2
      displayName: Check MSIX for common regressions
      inputs:
        targetType: inline
        script: >-
          $Package = Get-ChildItem -Recurse -Filter "CascadiaPackage_*.msix"

          .\build\scripts\Test-WindowsTerminalPackage.ps1 -Verbose -Path $Package.FullName
        pwsh: true
  - ${{ if eq(parameters.buildWPF, true) }}:
    - task: VSBuild@1
      displayName: Build solution **\OpenConsole.sln for PublicTerminalCore
      condition: and(succeeded(), ne(variables['BuildPlatform'], 'arm64'))
      inputs:
        solution: '**\OpenConsole.sln'
        vsVersion: 16.0
        msbuildArgs: /p:WindowsTerminalOfficialBuild=true /p:WindowsTerminalBranding=${{ parameters.branding }} /p:WindowsTerminalReleaseBuild=true /t:Terminal\wpf\PublicTerminalCore
        platform: $(BuildPlatform)
        configuration: $(BuildConfiguration)
  - task: PowerShell@2
    displayName: Source Index PDBs
    inputs:
      filePath: build\scripts\Index-Pdbs.ps1
      arguments: -SearchDir '$(Build.SourcesDirectory)' -SourceRoot '$(Build.SourcesDirectory)' -recursive -Verbose -CommitId $(Build.SourceVersion)
      errorActionPreference: silentlyContinue
  - task: ComponentGovernanceComponentDetection@0
    displayName: Component Detection
  - task: PowerShell@2
    displayName: Run Unit Tests
    condition: and(succeeded(), or(eq(variables['BuildPlatform'], 'x64'), eq(variables['BuildPlatform'], 'x86')))
    enabled: False
    inputs:
      filePath: build\scripts\Run-Tests.ps1
      arguments: -MatchPattern '*unit.test*.dll' -Platform '$(RationalizedBuildPlatform)' -Configuration '$(BuildConfiguration)'
  - task: PowerShell@2
    displayName: Run Feature Tests
    condition: and(succeeded(), eq(variables['BuildPlatform'], 'x64'))
    enabled: False
    inputs:
      filePath: build\scripts\Run-Tests.ps1
      arguments: -MatchPattern '*feature.test*.dll' -Platform '$(RationalizedBuildPlatform)' -Configuration '$(BuildConfiguration)'
  - ${{ if eq(parameters.buildTerminal, true) }}:
    - task: CopyFiles@2
      displayName: Copy *.appx/*.msix to Artifacts (Non-PR builds only)
      condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
      inputs:
        Contents: >-
          **/*.appx

          **/*.msix

          **/*.appxsym

          !**/Microsoft.VCLibs*.appx
        TargetFolder: $(Build.ArtifactStagingDirectory)/appx
        OverWrite: true
        flattenFolders: true
    - task: PublishBuildArtifacts@1
      displayName: Publish Artifact (appx) (Non-PR builds only)
      condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
      inputs:
        PathtoPublish: $(Build.ArtifactStagingDirectory)/appx
        ArtifactName: appx-$(BuildPlatform)-$(BuildConfiguration)
  - ${{ if eq(parameters.buildWPF, true) }}:
    - task: CopyFiles@2
      displayName: Copy PublicTerminalCore.dll to Artifacts (Non-PR builds only)
      condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'), ne(variables['BuildPlatform'], 'arm64'))
      inputs:
        Contents: '**/PublicTerminalCore.dll'
        TargetFolder: $(Build.ArtifactStagingDirectory)/wpf
        OverWrite: true
        flattenFolders: true
    - task: PublishBuildArtifacts@1
      displayName: Publish Artifact (PublicTerminalCore) (Non-PR builds only)
      condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'), ne(variables['BuildPlatform'], 'arm64'))
      inputs:
        PathtoPublish: $(Build.ArtifactStagingDirectory)/wpf
        ArtifactName: wpf-dll-$(BuildPlatform)-$(BuildConfiguration)
  - task: PublishSymbols@2
    displayName: Publish symbols path
    continueOnError: True
    inputs:
      SearchPattern: '**/*.pdb'
      IndexSources: false
      SymbolServerType: TeamServices

- ${{ if eq(parameters.buildTerminal, true) }}:
  - job: BundleAndSign
    displayName: Create and sign AppX/MSIX bundles
    dependsOn: Build
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    pool:
      name: Package ES Standard Build
    steps:
    - checkout: self
      clean: true
      submodules: true
      persistCredentials: True
    - task: PkgESSetupBuild@10
      displayName: Package ES - Setup Build
      inputs:
        useDfs: false
        productName: OpenConsole
        disableOutputRedirect: true
    - task: DownloadBuildArtifacts@0
      displayName: Download Artifacts (*.appx, *.msix)
      inputs:
        downloadType: specific
        itemPattern: >-
          **/*.msix

          **/*.appx
        extractTars: false
    - task: PowerShell@2
      displayName: Create WindowsTerminal*.msixbundle
      inputs:
        filePath: build\scripts\Create-AppxBundle.ps1
        arguments: -InputPath "$(System.ArtifactsDirectory)" -ProjectName CascadiaPackage -BundleVersion 0.0.0.0 -OutputPath "$(System.ArtifactsDirectory)\Microsoft.WindowsTerminal_$(XES_APPXMANIFESTVERSION)_8wekyb3d8bbwe.msixbundle"
    - task: PowerShell@2
      displayName: Create WindowsTerminalUniversal*.msixbundle
      inputs:
        filePath: build\scripts\Create-AppxBundle.ps1
        arguments: -InputPath "$(System.ArtifactsDirectory)" -ProjectName WindowsTerminalUniversal -BundleVersion $(XES_APPXMANIFESTVERSION) -OutputPath "$(System.ArtifactsDirectory)\Microsoft.WindowsTerminalUniversal_$(XES_APPXMANIFESTVERSION)_8wekyb3d8bbwe.msixbundle"
    - task: EsrpCodeSigning@1
      displayName: Submit *.msixbundle to ESRP for code signing
      inputs:
        ConnectedServiceName: 9d6d2960-0793-4d59-943e-78dcb434840a
        FolderPath: $(System.ArtifactsDirectory)
        Pattern: Microsoft.WindowsTerminal*.msixbundle
        UseMinimatch: true
        signConfigType: inlineSignParams
        inlineOperation: >-
          [
              {
                  "KeyCode": "Dynamic",
                  "CertTemplateName": "WINMSAPP1ST",
                  "CertSubjectName": "CN=Microsoft Corporation, O=Microsoft Corporation, L=Redmond, S=Washington, C=US",
                  "OperationCode": "SigntoolSign",
                  "Parameters": {
                      "OpusName": "Microsoft",
                      "OpusInfo": "http://www.microsoft.com",
                      "FileDigest": "/fd \"SHA256\"",
                      "TimeStamp": "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
                  },
                  "ToolName": "sign",
                  "ToolVersion": "1.0"
              },
              {
                  "KeyCode": "Dynamic",
                  "CertTemplateName": "WINMSAPP1ST",
                  "CertSubjectName": "CN=Microsoft Corporation, O=Microsoft Corporation, L=Redmond, S=Washington, C=US",
                  "OperationCode": "SigntoolVerify",
                  "Parameters": {},
                  "ToolName": "sign",
                  "ToolVersion": "1.0"
              }
          ]
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: appxbundle-signed'
      inputs:
        PathtoPublish: $(System.ArtifactsDirectory)
        ArtifactName: appxbundle-signed

- ${{ if eq(parameters.buildWPF, true) }}:
  - job: PackageAndSignWPF
    displayName: Create NuGet Package (WPF Terminal Control)
    dependsOn: Build
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    pool:
      name: Package ES Standard Build
    steps:
    - checkout: self
      clean: true
      submodules: true
      persistCredentials: True
    - task: PkgESSetupBuild@10
      displayName: Package ES - Setup Build
      inputs:
        useDfs: false
        productName: OpenConsole
        disableOutputRedirect: true
    - task: DownloadBuildArtifacts@0
      displayName: Download x86 PublicTerminalCore
      inputs:
        artifactName: wpf-dll-x86-$(BuildConfiguration)
        itemPattern: '**/*.dll'
        downloadPath: bin\Win32\$(BuildConfiguration)\
        extractTars: false
    - task: DownloadBuildArtifacts@0
      displayName: Download x64 PublicTerminalCore
      inputs:
        artifactName: wpf-dll-x64-$(BuildConfiguration)
        itemPattern: '**/*.dll'
        downloadPath: bin\x64\$(BuildConfiguration)\
        extractTars: false
    - task: PowerShell@2
      displayName: Move downloaded artifacts up a level
      inputs:
        targetType: inline
        script: >-
          # Find all PublicTerminalCore(s) and move them up a directory. Ugh.

          Get-ChildItem bin -Recurse -Filter PublicTerminalCore.dll | % {
              Write-Host "Moving $($_.FullName) to $($_.Directory.Parent.FullName)"
              Move-Item $_.FullName $_.Directory.Parent.FullName
          }
    - task: NuGetToolInstaller@1
      displayName: Use NuGet 5.10.0
      inputs:
        versionSpec: 5.10.0
    - task: NuGetCommand@2
      displayName: NuGet restore copy
      inputs:
        selectOrConfig: config
        nugetConfigPath: NuGet.Config
    - task: VSBuild@1
      displayName: Build solution **\OpenConsole.sln for WPF Control
      inputs:
        solution: '**\OpenConsole.sln'
        vsVersion: 16.0
        msbuildArgs: /p:WindowsTerminalReleaseBuild=$(UseReleaseBranding);Version=$(XES_PACKAGEVERSIONNUMBER) /t:Pack
        platform: Any CPU
        configuration: $(BuildConfiguration)
        maximumCpuCount: true
    - task: PublishSymbols@2
      displayName: Publish symbols path
      continueOnError: True
      inputs:
        SearchPattern: '**/*.pdb'
        IndexSources: false
        SymbolServerType: TeamServices
        SymbolsArtifactName: Symbols_WPF_$(BuildConfiguration)
    - task: CopyFiles@2
      displayName: Copy *.nupkg to Artifacts (Non-PR builds only)
      condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
      inputs:
        Contents: '**/*Wpf*.nupkg'
        TargetFolder: $(Build.ArtifactStagingDirectory)/nupkg
        OverWrite: true
        flattenFolders: true
    - task: EsrpCodeSigning@1
      displayName: Submit *.nupkg to ESRP for code signing
      inputs:
        ConnectedServiceName: 9d6d2960-0793-4d59-943e-78dcb434840a
        FolderPath: $(Build.ArtifactStagingDirectory)/nupkg
        Pattern: '*.nupkg'
        UseMinimatch: true
        signConfigType: inlineSignParams
        inlineOperation: >-
          [
              {
                  "KeyCode": "CP-401405",
                  "OperationCode": "NuGetSign",
                  "Parameters": {},
                  "ToolName": "sign",
                  "ToolVersion": "1.0"
              },
              {
                  "KeyCode": "CP-401405",
                  "OperationCode": "NuGetVerify",
                  "Parameters": {},
                  "ToolName": "sign",
                  "ToolVersion": "1.0"
              }
          ]
    - task: PublishBuildArtifacts@1
      displayName: Publish Artifact (nupkg) (Non-PR builds only)
      condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
      inputs:
        PathtoPublish: $(Build.ArtifactStagingDirectory)\nupkg
        ArtifactName: wpf-nupkg-$(BuildConfiguration)

- ${{ if eq(parameters.buildTerminalVPack, true) }}:
  - job: VPack
    displayName: Create Windows vPack
    dependsOn: Build
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    pool:
      name: Package ES Standard Build
    steps:
    - checkout: self
      clean: true
      submodules: true
    - task: PkgESSetupBuild@12
      displayName: Package ES - Setup Build
    - task: DownloadBuildArtifacts@0
      displayName: Download Build Artifacts
      inputs:
        artifactName: appxbundle-signed
        extractTars: false
    - task: PowerShell@2
      displayName: Rename and stage packages for vpack
      inputs:
        targetType: inline
        script: >-
          # Rename to known/fixed name for Windows build system

          Get-ChildItem Microsoft.WindowsTerminal_*.msixbundle | Rename-Item -NewName { 'Microsoft.WindowsTerminal_8wekyb3d8bbwe.msixbundle' }


          # Create vpack directory and place item inside

          mkdir WindowsTerminal.app

          mv Microsoft.WindowsTerminal_8wekyb3d8bbwe.msixbundle .\WindowsTerminal.app\
        workingDirectory: $(System.ArtifactsDirectory)\appxbundle-signed
    - task: PkgESVPack@10
      displayName: 'Package ES - VPack'
      inputs:
        sourceDirectory: $(System.ArtifactsDirectory)\appxbundle-signed\WindowsTerminal.app
        description: Windows Terminal pre-install application
        pushPkgName: WindowsTerminal.app
        owner: condev
...
